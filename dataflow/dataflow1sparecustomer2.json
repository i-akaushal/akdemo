{
	"name": "dataflow1sparecustomer2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Datasetsalesorders",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          OrderID as short,",
				"          CustomerID as short,",
				"          SalespersonPersonID as short,",
				"          PickedByPersonID as short,",
				"          ContactPersonID as short,",
				"          BackorderOrderID as short,",
				"          OrderDate as string,",
				"          ExpectedDeliveryDate as string,",
				"          CustomerPurchaseOrderNumber as short,",
				"          IsUndersupplyBackordered as boolean,",
				"          Comments as string,",
				"          DeliveryInstructions as string,",
				"          InternalComments as string,",
				"          PickingCompletedWhen as string,",
				"          LastEditedBy as short,",
				"          LastEditedWhen as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          OrderLineID as integer,",
				"          OrderID as integer,",
				"          StockItemID as integer,",
				"          Description as string,",
				"          PackageTypeID as integer,",
				"          Quantity as integer,",
				"          UnitPrice as decimal(18,2),",
				"          TaxRate as decimal(18,3),",
				"          PickedQuantity as integer,",
				"          PickingCompletedWhen as timestamp,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'Sales',",
				"     tableName: 'OrderLines',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> source2",
				"source1, source2 join(source1@OrderID == source2@OrderID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(CustomerID,",
				"          StockItemID),",
				"     Total = sum(Quantity)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     container: 'salescontainer',",
				"     folderPath: 'customerorders',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}